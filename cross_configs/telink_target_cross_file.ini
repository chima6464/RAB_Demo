# tc_ble_mesh-master/cross_configs/telink_target_cross_file.ini

[binaries]
# --- Essential Toolchain Binaries ---
c       = '/home/henry/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-gcc'
cpp     = '/home/henry/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-g++'
asm     = '/home/henry/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-as'

# It's good practice to also define 'ar' (archiver) and 'strip'.
# These usually follow the same prefix and are in the same 'bin' directory.
ar      = '/home/henry/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-ar'
strip   = '/home/henry/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-strip'

# If you need objcopy for post-build steps (like generating .bin/.hex),
# you can define it here or ensure find_program() in meson.build can find it.
# objcopy = '/home/youruser/toolchains/telink_riscv_linux_toolchain/nds32le-elf-mculib-v5f/bin/riscv32-elf-objcopy'

[host_machine]
# --- Properties of the Target System (where the code will run) ---
system     = 'elf'        # Common for bare-metal or RTOS embedded systems
cpu_family = 'riscv32'   # Since your compilers are riscv32-elf-*
# For 'cpu', you should use a value that reflects the specific RISC-V core
# your Telink chip uses (e.g., rv32imac, rv32gc, or a vendor-specific name if Meson supports it).
# The 'nds32le-elf-mculib-v5f' path might hint at an AndesCore.
# Start with a generic one if unsure, and refine based on Telink/Andes documentation.
cpu        = 'generic_riscv32' # Example: replace with specific core if known (e.g. 'rv32imac')
endian     = 'little'     # 'le' in 'nds32le' implies little-endian

[built-in options]
# --- Toolchain-specific flags or properties ---
# These flags are EXAMPLES. You MUST consult your Telink SDK documentation
# for the correct architecture, ABI, and other necessary compiler flags for your specific chip.

# Common C arguments for RISC-V embedded targets.
# Adjust march (ISA extensions) and mabi (ABI) based on your Telink chip.
c_args = [
  '-march=rv32imc',      # Example: ISA (Integer, Multiply, Compressed)
  '-mabi=ilp32',         # Example: ABI (Integer-Long-Pointer 32-bit)
  '-nostartfiles',       # Often used in bare-metal
  '-ffunction-sections', # Allow linker to remove unused functions
  '-fdata-sections']

# Common C++ arguments (if using C++)
# If you need distinct cpp_args, list them fully.
# To share, you'd typically repeat them or handle variations in meson.build.
# For simplicity here, let's assume they are the same as c_args plus C++ specific ones.
# You cannot directly use "c_args + [...]" syntax here. List all flags for cpp_args.
cpp_args = [
  '-march=rv32imc',
  '-mabi=ilp32',
  '-nostartfiles',
  '-ffunction-sections',
  '-fdata-sections']

# Common assembler arguments (if needed beyond what -x assembler-with-cpp provides via c_args)
# asm_args = ['-march=rv32imc', '-mabi=ilp32']

# Common linker arguments
# The linker script itself (-T path/to/script.ld) is usually specified per executable target in meson.build
# but global linker flags like --gc-sections can be here.
# Each flag is a separate string in the list.
c_link_args = ['-Wl,--gc-sections'] # Garbage collect unused sections
cpp_link_args = ['-Wl,--gc-sections'] # If using C++, often the same global linker flags